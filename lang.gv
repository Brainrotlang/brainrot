// Generated by GNU Bison 3.8.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "lang.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • program $end\l"]
  0 -> 1 [style=solid label="SKIBIDI"]
  0 -> 2 [style=dashed label="program"]
  0 -> 3 [style=dashed label="skibidi_function"]
  1 [label="State 1\n\l  2 skibidi_function: SKIBIDI • MAIN LBRACE statements RBRACE\l"]
  1 -> 4 [style=solid label="MAIN"]
  2 [label="State 2\n\l  0 $accept: program • $end\l"]
  2 -> 5 [style=solid label="$end"]
  3 [label="State 3\n\l  1 program: skibidi_function •\l"]
  3 -> "3R1" [style=solid]
 "3R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l  2 skibidi_function: SKIBIDI MAIN • LBRACE statements RBRACE\l"]
  4 -> 6 [style=solid label="LBRACE"]
  5 [label="State 5\n\l  0 $accept: program $end •\l"]
  5 -> "5R0" [style=solid]
 "5R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  6 [label="State 6\n\l  2 skibidi_function: SKIBIDI MAIN LBRACE • statements RBRACE\l"]
  6 -> 7 [style=dashed label="statements"]
  6 -> "6R3" [style=solid]
 "6R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l  2 skibidi_function: SKIBIDI MAIN LBRACE statements • RBRACE\l  4 statements: statements • statement\l"]
  7 -> 8 [style=solid label="BAKA"]
  7 -> 9 [style=solid label="BUSSIN"]
  7 -> 10 [style=solid label="FLEX"]
  7 -> 11 [style=solid label="MINUS"]
  7 -> 12 [style=solid label="LPAREN"]
  7 -> 13 [style=solid label="RBRACE"]
  7 -> 14 [style=solid label="BREAK"]
  7 -> 15 [style=solid label="IF"]
  7 -> 16 [style=solid label="SIZEOF"]
  7 -> 17 [style=solid label="SWITCH"]
  7 -> 18 [style=solid label="GOON"]
  7 -> 19 [style=solid label="IDENTIFIER"]
  7 -> 20 [style=solid label="INT_LITERAL"]
  7 -> 21 [style=solid label="STRING_LITERAL"]
  7 -> 22 [style=solid label="CHAR"]
  7 -> 23 [style=solid label="BOOLEAN"]
  7 -> 24 [style=solid label="FLOAT_LITERAL"]
  7 -> 25 [style=solid label="DOUBLE_LITERAL"]
  7 -> 26 [style=dashed label="statement"]
  7 -> 27 [style=dashed label="switch_statement"]
  7 -> 28 [style=dashed label="break_statement"]
  7 -> 29 [style=dashed label="if_statement"]
  7 -> 30 [style=dashed label="declaration"]
  7 -> 31 [style=dashed label="optional_modifiers"]
  7 -> 32 [style=dashed label="for_statement"]
  7 -> 33 [style=dashed label="while_statement"]
  7 -> 34 [style=dashed label="function_call"]
  7 -> 35 [style=dashed label="error_statement"]
  7 -> 36 [style=dashed label="return_statement"]
  7 -> 37 [style=dashed label="expression"]
  7 -> "7R34" [style=solid]
 "7R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 51 error_statement: BAKA • LPAREN expression RPAREN\l"]
  8 -> 38 [style=solid label="LPAREN"]
  9 [label="State 9\n\l 52 return_statement: BUSSIN • expression\l"]
  9 -> 11 [style=solid label="MINUS"]
  9 -> 12 [style=solid label="LPAREN"]
  9 -> 16 [style=solid label="SIZEOF"]
  9 -> 39 [style=solid label="IDENTIFIER"]
  9 -> 20 [style=solid label="INT_LITERAL"]
  9 -> 21 [style=solid label="STRING_LITERAL"]
  9 -> 22 [style=solid label="CHAR"]
  9 -> 23 [style=solid label="BOOLEAN"]
  9 -> 24 [style=solid label="FLOAT_LITERAL"]
  9 -> 25 [style=solid label="DOUBLE_LITERAL"]
  9 -> 40 [style=dashed label="expression"]
  10 [label="State 10\n\l 40 for_statement: FLEX • LPAREN init_expr SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACE\l"]
  10 -> 41 [style=solid label="LPAREN"]
  11 [label="State 11\n\l 74 expression: MINUS • expression\l"]
  11 -> 11 [style=solid label="MINUS"]
  11 -> 12 [style=solid label="LPAREN"]
  11 -> 16 [style=solid label="SIZEOF"]
  11 -> 39 [style=solid label="IDENTIFIER"]
  11 -> 20 [style=solid label="INT_LITERAL"]
  11 -> 21 [style=solid label="STRING_LITERAL"]
  11 -> 22 [style=solid label="CHAR"]
  11 -> 23 [style=solid label="BOOLEAN"]
  11 -> 24 [style=solid label="FLOAT_LITERAL"]
  11 -> 25 [style=solid label="DOUBLE_LITERAL"]
  11 -> 42 [style=dashed label="expression"]
  12 [label="State 12\n\l 75 expression: LPAREN • expression RPAREN\l"]
  12 -> 11 [style=solid label="MINUS"]
  12 -> 12 [style=solid label="LPAREN"]
  12 -> 16 [style=solid label="SIZEOF"]
  12 -> 39 [style=solid label="IDENTIFIER"]
  12 -> 20 [style=solid label="INT_LITERAL"]
  12 -> 21 [style=solid label="STRING_LITERAL"]
  12 -> 22 [style=solid label="CHAR"]
  12 -> 23 [style=solid label="BOOLEAN"]
  12 -> 24 [style=solid label="FLOAT_LITERAL"]
  12 -> 25 [style=solid label="DOUBLE_LITERAL"]
  12 -> 43 [style=dashed label="expression"]
  13 [label="State 13\n\l  2 skibidi_function: SKIBIDI MAIN LBRACE statements RBRACE •\l"]
  13 -> "13R2" [style=solid]
 "13R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l 20 break_statement: BREAK •\l"]
  14 -> "14R20" [style=solid]
 "14R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l 21 if_statement: IF • LPAREN expression RPAREN LBRACE statements RBRACE\l 22             | IF • LPAREN expression RPAREN LBRACE statements RBRACE ELSE if_statement\l 23             | IF • LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\l"]
  15 -> 44 [style=solid label="LPAREN"]
  16 [label="State 16\n\l 59 expression: SIZEOF • LPAREN IDENTIFIER RPAREN\l"]
  16 -> 45 [style=solid label="LPAREN"]
  17 [label="State 17\n\l 15 switch_statement: SWITCH • LPAREN expression RPAREN LBRACE case_list RBRACE\l"]
  17 -> 46 [style=solid label="LPAREN"]
  18 [label="State 18\n\l 41 while_statement: GOON • LPAREN expression RPAREN LBRACE statements RBRACE\l"]
  18 -> 47 [style=solid label="LPAREN"]
  19 [label="State 19\n\l 46 function_call: IDENTIFIER • LPAREN arg_list RPAREN\l 58 expression: IDENTIFIER •\l 60           | IDENTIFIER • EQUALS expression\l"]
  19 -> 48 [style=solid label="LPAREN"]
  19 -> 49 [style=solid label="EQUALS"]
  19 -> "19R58" [style=solid]
 "19R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l 53 expression: INT_LITERAL •\l"]
  20 -> "20R53" [style=solid]
 "20R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l 76 expression: STRING_LITERAL •\l"]
  21 -> "21R76" [style=solid]
 "21R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l 56 expression: CHAR •\l"]
  22 -> "22R56" [style=solid]
 "22R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l 57 expression: BOOLEAN •\l"]
  23 -> "23R57" [style=solid]
 "23R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l 54 expression: FLOAT_LITERAL •\l"]
  24 -> "24R54" [style=solid]
 "24R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l 55 expression: DOUBLE_LITERAL •\l"]
  25 -> "25R55" [style=solid]
 "25R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l  4 statements: statements statement •\l"]
  26 -> "26R4" [style=solid]
 "26R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  27 [label="State 27\n\l 12 statement: switch_statement •\l"]
  27 -> "27R12" [style=solid]
 "27R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l 13 statement: break_statement • SEMICOLON\l"]
  28 -> 50 [style=solid label="SEMICOLON"]
  29 [label="State 29\n\l 11 statement: if_statement •\l"]
  29 -> "29R11" [style=solid]
 "29R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l  5 statement: declaration • SEMICOLON\l"]
  30 -> 51 [style=solid label="SEMICOLON"]
  31 [label="State 31\n\l 24 declaration: optional_modifiers • RIZZ IDENTIFIER\l 25            | optional_modifiers • RIZZ IDENTIFIER EQUALS expression\l 26            | optional_modifiers • CHAD IDENTIFIER\l 27            | optional_modifiers • CHAD IDENTIFIER EQUALS expression\l 28            | optional_modifiers • GIGACHAD IDENTIFIER\l 29            | optional_modifiers • GIGACHAD IDENTIFIER EQUALS expression\l 30            | optional_modifiers • YAP IDENTIFIER\l 31            | optional_modifiers • YAP IDENTIFIER EQUALS expression\l 32            | optional_modifiers • CAP IDENTIFIER\l 33            | optional_modifiers • CAP IDENTIFIER EQUALS expression\l 35 optional_modifiers: optional_modifiers • modifier\l"]
  31 -> 52 [style=solid label="RIZZ"]
  31 -> 53 [style=solid label="YAP"]
  31 -> 54 [style=solid label="CAP"]
  31 -> 55 [style=solid label="CHAD"]
  31 -> 56 [style=solid label="GIGACHAD"]
  31 -> 57 [style=solid label="SIGNED"]
  31 -> 58 [style=solid label="UNSIGNED"]
  31 -> 59 [style=solid label="VOLATILE"]
  31 -> 60 [style=dashed label="modifier"]
  32 [label="State 32\n\l  6 statement: for_statement •\l"]
  32 -> "32R6" [style=solid]
 "32R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l  7 statement: while_statement •\l"]
  33 -> "33R7" [style=solid]
 "33R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  34 [label="State 34\n\l  8 statement: function_call • SEMICOLON\l"]
  34 -> 61 [style=solid label="SEMICOLON"]
  35 [label="State 35\n\l  9 statement: error_statement • SEMICOLON\l"]
  35 -> 62 [style=solid label="SEMICOLON"]
  36 [label="State 36\n\l 10 statement: return_statement • SEMICOLON\l"]
  36 -> 63 [style=solid label="SEMICOLON"]
  37 [label="State 37\n\l 14 statement: expression • SEMICOLON\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  37 -> 64 [style=solid label="PLUS"]
  37 -> 65 [style=solid label="MINUS"]
  37 -> 66 [style=solid label="TIMES"]
  37 -> 67 [style=solid label="DIVIDE"]
  37 -> 68 [style=solid label="MOD"]
  37 -> 69 [style=solid label="SEMICOLON"]
  37 -> 70 [style=solid label="LT"]
  37 -> 71 [style=solid label="GT"]
  37 -> 72 [style=solid label="LE"]
  37 -> 73 [style=solid label="GE"]
  37 -> 74 [style=solid label="EQ"]
  37 -> 75 [style=solid label="NE"]
  37 -> 76 [style=solid label="AND"]
  37 -> 77 [style=solid label="OR"]
  37 -> 78 [style=solid label="DEC"]
  37 -> 79 [style=solid label="INC"]
  38 [label="State 38\n\l 51 error_statement: BAKA LPAREN • expression RPAREN\l"]
  38 -> 11 [style=solid label="MINUS"]
  38 -> 12 [style=solid label="LPAREN"]
  38 -> 16 [style=solid label="SIZEOF"]
  38 -> 39 [style=solid label="IDENTIFIER"]
  38 -> 20 [style=solid label="INT_LITERAL"]
  38 -> 21 [style=solid label="STRING_LITERAL"]
  38 -> 22 [style=solid label="CHAR"]
  38 -> 23 [style=solid label="BOOLEAN"]
  38 -> 24 [style=solid label="FLOAT_LITERAL"]
  38 -> 25 [style=solid label="DOUBLE_LITERAL"]
  38 -> 80 [style=dashed label="expression"]
  39 [label="State 39\n\l 58 expression: IDENTIFIER •\l 60           | IDENTIFIER • EQUALS expression\l"]
  39 -> 49 [style=solid label="EQUALS"]
  39 -> "39R58" [style=solid]
 "39R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l 52 return_statement: BUSSIN expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  40 -> 64 [style=solid label="PLUS"]
  40 -> 65 [style=solid label="MINUS"]
  40 -> 66 [style=solid label="TIMES"]
  40 -> 67 [style=solid label="DIVIDE"]
  40 -> 68 [style=solid label="MOD"]
  40 -> 70 [style=solid label="LT"]
  40 -> 71 [style=solid label="GT"]
  40 -> 72 [style=solid label="LE"]
  40 -> 73 [style=solid label="GE"]
  40 -> 74 [style=solid label="EQ"]
  40 -> 75 [style=solid label="NE"]
  40 -> 76 [style=solid label="AND"]
  40 -> 77 [style=solid label="OR"]
  40 -> 78 [style=solid label="DEC"]
  40 -> 79 [style=solid label="INC"]
  40 -> "40R52" [style=solid]
 "40R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l 40 for_statement: FLEX LPAREN • init_expr SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACE\l"]
  41 -> 11 [style=solid label="MINUS"]
  41 -> 12 [style=solid label="LPAREN"]
  41 -> 16 [style=solid label="SIZEOF"]
  41 -> 39 [style=solid label="IDENTIFIER"]
  41 -> 20 [style=solid label="INT_LITERAL"]
  41 -> 21 [style=solid label="STRING_LITERAL"]
  41 -> 22 [style=solid label="CHAR"]
  41 -> 23 [style=solid label="BOOLEAN"]
  41 -> 24 [style=solid label="FLOAT_LITERAL"]
  41 -> 25 [style=solid label="DOUBLE_LITERAL"]
  41 -> 81 [style=dashed label="declaration"]
  41 -> 31 [style=dashed label="optional_modifiers"]
  41 -> 82 [style=dashed label="init_expr"]
  41 -> 83 [style=dashed label="expression"]
  41 -> "41R34" [style=solid]
 "41R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 74           | MINUS expression •\l 77           | expression • INC\l 78           | expression • DEC\l"]
  42 -> "42R74" [style=solid]
 "42R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 75           | LPAREN expression • RPAREN\l 77           | expression • INC\l 78           | expression • DEC\l"]
  43 -> 64 [style=solid label="PLUS"]
  43 -> 65 [style=solid label="MINUS"]
  43 -> 66 [style=solid label="TIMES"]
  43 -> 67 [style=solid label="DIVIDE"]
  43 -> 68 [style=solid label="MOD"]
  43 -> 84 [style=solid label="RPAREN"]
  43 -> 70 [style=solid label="LT"]
  43 -> 71 [style=solid label="GT"]
  43 -> 72 [style=solid label="LE"]
  43 -> 73 [style=solid label="GE"]
  43 -> 74 [style=solid label="EQ"]
  43 -> 75 [style=solid label="NE"]
  43 -> 76 [style=solid label="AND"]
  43 -> 77 [style=solid label="OR"]
  43 -> 78 [style=solid label="DEC"]
  43 -> 79 [style=solid label="INC"]
  44 [label="State 44\n\l 21 if_statement: IF LPAREN • expression RPAREN LBRACE statements RBRACE\l 22             | IF LPAREN • expression RPAREN LBRACE statements RBRACE ELSE if_statement\l 23             | IF LPAREN • expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\l"]
  44 -> 11 [style=solid label="MINUS"]
  44 -> 12 [style=solid label="LPAREN"]
  44 -> 16 [style=solid label="SIZEOF"]
  44 -> 39 [style=solid label="IDENTIFIER"]
  44 -> 20 [style=solid label="INT_LITERAL"]
  44 -> 21 [style=solid label="STRING_LITERAL"]
  44 -> 22 [style=solid label="CHAR"]
  44 -> 23 [style=solid label="BOOLEAN"]
  44 -> 24 [style=solid label="FLOAT_LITERAL"]
  44 -> 25 [style=solid label="DOUBLE_LITERAL"]
  44 -> 85 [style=dashed label="expression"]
  45 [label="State 45\n\l 59 expression: SIZEOF LPAREN • IDENTIFIER RPAREN\l"]
  45 -> 86 [style=solid label="IDENTIFIER"]
  46 [label="State 46\n\l 15 switch_statement: SWITCH LPAREN • expression RPAREN LBRACE case_list RBRACE\l"]
  46 -> 11 [style=solid label="MINUS"]
  46 -> 12 [style=solid label="LPAREN"]
  46 -> 16 [style=solid label="SIZEOF"]
  46 -> 39 [style=solid label="IDENTIFIER"]
  46 -> 20 [style=solid label="INT_LITERAL"]
  46 -> 21 [style=solid label="STRING_LITERAL"]
  46 -> 22 [style=solid label="CHAR"]
  46 -> 23 [style=solid label="BOOLEAN"]
  46 -> 24 [style=solid label="FLOAT_LITERAL"]
  46 -> 25 [style=solid label="DOUBLE_LITERAL"]
  46 -> 87 [style=dashed label="expression"]
  47 [label="State 47\n\l 41 while_statement: GOON LPAREN • expression RPAREN LBRACE statements RBRACE\l"]
  47 -> 11 [style=solid label="MINUS"]
  47 -> 12 [style=solid label="LPAREN"]
  47 -> 16 [style=solid label="SIZEOF"]
  47 -> 39 [style=solid label="IDENTIFIER"]
  47 -> 20 [style=solid label="INT_LITERAL"]
  47 -> 21 [style=solid label="STRING_LITERAL"]
  47 -> 22 [style=solid label="CHAR"]
  47 -> 23 [style=solid label="BOOLEAN"]
  47 -> 24 [style=solid label="FLOAT_LITERAL"]
  47 -> 25 [style=solid label="DOUBLE_LITERAL"]
  47 -> 88 [style=dashed label="expression"]
  48 [label="State 48\n\l 46 function_call: IDENTIFIER LPAREN • arg_list RPAREN\l"]
  48 -> 11 [style=solid label="MINUS"]
  48 -> 12 [style=solid label="LPAREN"]
  48 -> 16 [style=solid label="SIZEOF"]
  48 -> 39 [style=solid label="IDENTIFIER"]
  48 -> 20 [style=solid label="INT_LITERAL"]
  48 -> 21 [style=solid label="STRING_LITERAL"]
  48 -> 22 [style=solid label="CHAR"]
  48 -> 23 [style=solid label="BOOLEAN"]
  48 -> 24 [style=solid label="FLOAT_LITERAL"]
  48 -> 25 [style=solid label="DOUBLE_LITERAL"]
  48 -> 89 [style=dashed label="arg_list"]
  48 -> 90 [style=dashed label="argument_list"]
  48 -> 91 [style=dashed label="expression"]
  48 -> "48R47" [style=solid]
 "48R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l 60 expression: IDENTIFIER EQUALS • expression\l"]
  49 -> 11 [style=solid label="MINUS"]
  49 -> 12 [style=solid label="LPAREN"]
  49 -> 16 [style=solid label="SIZEOF"]
  49 -> 39 [style=solid label="IDENTIFIER"]
  49 -> 20 [style=solid label="INT_LITERAL"]
  49 -> 21 [style=solid label="STRING_LITERAL"]
  49 -> 22 [style=solid label="CHAR"]
  49 -> 23 [style=solid label="BOOLEAN"]
  49 -> 24 [style=solid label="FLOAT_LITERAL"]
  49 -> 25 [style=solid label="DOUBLE_LITERAL"]
  49 -> 92 [style=dashed label="expression"]
  50 [label="State 50\n\l 13 statement: break_statement SEMICOLON •\l"]
  50 -> "50R13" [style=solid]
 "50R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l  5 statement: declaration SEMICOLON •\l"]
  51 -> "51R5" [style=solid]
 "51R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l 24 declaration: optional_modifiers RIZZ • IDENTIFIER\l 25            | optional_modifiers RIZZ • IDENTIFIER EQUALS expression\l"]
  52 -> 93 [style=solid label="IDENTIFIER"]
  53 [label="State 53\n\l 30 declaration: optional_modifiers YAP • IDENTIFIER\l 31            | optional_modifiers YAP • IDENTIFIER EQUALS expression\l"]
  53 -> 94 [style=solid label="IDENTIFIER"]
  54 [label="State 54\n\l 32 declaration: optional_modifiers CAP • IDENTIFIER\l 33            | optional_modifiers CAP • IDENTIFIER EQUALS expression\l 39 modifier: CAP •\l"]
  54 -> 95 [style=solid label="IDENTIFIER"]
  54 -> "54R39" [style=solid]
 "54R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 26 declaration: optional_modifiers CHAD • IDENTIFIER\l 27            | optional_modifiers CHAD • IDENTIFIER EQUALS expression\l"]
  55 -> 96 [style=solid label="IDENTIFIER"]
  56 [label="State 56\n\l 28 declaration: optional_modifiers GIGACHAD • IDENTIFIER\l 29            | optional_modifiers GIGACHAD • IDENTIFIER EQUALS expression\l"]
  56 -> 97 [style=solid label="IDENTIFIER"]
  57 [label="State 57\n\l 37 modifier: SIGNED •\l"]
  57 -> "57R37" [style=solid]
 "57R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 38 modifier: UNSIGNED •\l"]
  58 -> "58R38" [style=solid]
 "58R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 36 modifier: VOLATILE •\l"]
  59 -> "59R36" [style=solid]
 "59R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 35 optional_modifiers: optional_modifiers modifier •\l"]
  60 -> "60R35" [style=solid]
 "60R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l  8 statement: function_call SEMICOLON •\l"]
  61 -> "61R8" [style=solid]
 "61R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l  9 statement: error_statement SEMICOLON •\l"]
  62 -> "62R9" [style=solid]
 "62R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 10 statement: return_statement SEMICOLON •\l"]
  63 -> "63R10" [style=solid]
 "63R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 61 expression: expression PLUS • expression\l"]
  64 -> 11 [style=solid label="MINUS"]
  64 -> 12 [style=solid label="LPAREN"]
  64 -> 16 [style=solid label="SIZEOF"]
  64 -> 39 [style=solid label="IDENTIFIER"]
  64 -> 20 [style=solid label="INT_LITERAL"]
  64 -> 21 [style=solid label="STRING_LITERAL"]
  64 -> 22 [style=solid label="CHAR"]
  64 -> 23 [style=solid label="BOOLEAN"]
  64 -> 24 [style=solid label="FLOAT_LITERAL"]
  64 -> 25 [style=solid label="DOUBLE_LITERAL"]
  64 -> 98 [style=dashed label="expression"]
  65 [label="State 65\n\l 62 expression: expression MINUS • expression\l"]
  65 -> 11 [style=solid label="MINUS"]
  65 -> 12 [style=solid label="LPAREN"]
  65 -> 16 [style=solid label="SIZEOF"]
  65 -> 39 [style=solid label="IDENTIFIER"]
  65 -> 20 [style=solid label="INT_LITERAL"]
  65 -> 21 [style=solid label="STRING_LITERAL"]
  65 -> 22 [style=solid label="CHAR"]
  65 -> 23 [style=solid label="BOOLEAN"]
  65 -> 24 [style=solid label="FLOAT_LITERAL"]
  65 -> 25 [style=solid label="DOUBLE_LITERAL"]
  65 -> 99 [style=dashed label="expression"]
  66 [label="State 66\n\l 63 expression: expression TIMES • expression\l"]
  66 -> 11 [style=solid label="MINUS"]
  66 -> 12 [style=solid label="LPAREN"]
  66 -> 16 [style=solid label="SIZEOF"]
  66 -> 39 [style=solid label="IDENTIFIER"]
  66 -> 20 [style=solid label="INT_LITERAL"]
  66 -> 21 [style=solid label="STRING_LITERAL"]
  66 -> 22 [style=solid label="CHAR"]
  66 -> 23 [style=solid label="BOOLEAN"]
  66 -> 24 [style=solid label="FLOAT_LITERAL"]
  66 -> 25 [style=solid label="DOUBLE_LITERAL"]
  66 -> 100 [style=dashed label="expression"]
  67 [label="State 67\n\l 64 expression: expression DIVIDE • expression\l"]
  67 -> 11 [style=solid label="MINUS"]
  67 -> 12 [style=solid label="LPAREN"]
  67 -> 16 [style=solid label="SIZEOF"]
  67 -> 39 [style=solid label="IDENTIFIER"]
  67 -> 20 [style=solid label="INT_LITERAL"]
  67 -> 21 [style=solid label="STRING_LITERAL"]
  67 -> 22 [style=solid label="CHAR"]
  67 -> 23 [style=solid label="BOOLEAN"]
  67 -> 24 [style=solid label="FLOAT_LITERAL"]
  67 -> 25 [style=solid label="DOUBLE_LITERAL"]
  67 -> 101 [style=dashed label="expression"]
  68 [label="State 68\n\l 65 expression: expression MOD • expression\l"]
  68 -> 11 [style=solid label="MINUS"]
  68 -> 12 [style=solid label="LPAREN"]
  68 -> 16 [style=solid label="SIZEOF"]
  68 -> 39 [style=solid label="IDENTIFIER"]
  68 -> 20 [style=solid label="INT_LITERAL"]
  68 -> 21 [style=solid label="STRING_LITERAL"]
  68 -> 22 [style=solid label="CHAR"]
  68 -> 23 [style=solid label="BOOLEAN"]
  68 -> 24 [style=solid label="FLOAT_LITERAL"]
  68 -> 25 [style=solid label="DOUBLE_LITERAL"]
  68 -> 102 [style=dashed label="expression"]
  69 [label="State 69\n\l 14 statement: expression SEMICOLON •\l"]
  69 -> "69R14" [style=solid]
 "69R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  70 [label="State 70\n\l 66 expression: expression LT • expression\l"]
  70 -> 11 [style=solid label="MINUS"]
  70 -> 12 [style=solid label="LPAREN"]
  70 -> 16 [style=solid label="SIZEOF"]
  70 -> 39 [style=solid label="IDENTIFIER"]
  70 -> 20 [style=solid label="INT_LITERAL"]
  70 -> 21 [style=solid label="STRING_LITERAL"]
  70 -> 22 [style=solid label="CHAR"]
  70 -> 23 [style=solid label="BOOLEAN"]
  70 -> 24 [style=solid label="FLOAT_LITERAL"]
  70 -> 25 [style=solid label="DOUBLE_LITERAL"]
  70 -> 103 [style=dashed label="expression"]
  71 [label="State 71\n\l 67 expression: expression GT • expression\l"]
  71 -> 11 [style=solid label="MINUS"]
  71 -> 12 [style=solid label="LPAREN"]
  71 -> 16 [style=solid label="SIZEOF"]
  71 -> 39 [style=solid label="IDENTIFIER"]
  71 -> 20 [style=solid label="INT_LITERAL"]
  71 -> 21 [style=solid label="STRING_LITERAL"]
  71 -> 22 [style=solid label="CHAR"]
  71 -> 23 [style=solid label="BOOLEAN"]
  71 -> 24 [style=solid label="FLOAT_LITERAL"]
  71 -> 25 [style=solid label="DOUBLE_LITERAL"]
  71 -> 104 [style=dashed label="expression"]
  72 [label="State 72\n\l 68 expression: expression LE • expression\l"]
  72 -> 11 [style=solid label="MINUS"]
  72 -> 12 [style=solid label="LPAREN"]
  72 -> 16 [style=solid label="SIZEOF"]
  72 -> 39 [style=solid label="IDENTIFIER"]
  72 -> 20 [style=solid label="INT_LITERAL"]
  72 -> 21 [style=solid label="STRING_LITERAL"]
  72 -> 22 [style=solid label="CHAR"]
  72 -> 23 [style=solid label="BOOLEAN"]
  72 -> 24 [style=solid label="FLOAT_LITERAL"]
  72 -> 25 [style=solid label="DOUBLE_LITERAL"]
  72 -> 105 [style=dashed label="expression"]
  73 [label="State 73\n\l 69 expression: expression GE • expression\l"]
  73 -> 11 [style=solid label="MINUS"]
  73 -> 12 [style=solid label="LPAREN"]
  73 -> 16 [style=solid label="SIZEOF"]
  73 -> 39 [style=solid label="IDENTIFIER"]
  73 -> 20 [style=solid label="INT_LITERAL"]
  73 -> 21 [style=solid label="STRING_LITERAL"]
  73 -> 22 [style=solid label="CHAR"]
  73 -> 23 [style=solid label="BOOLEAN"]
  73 -> 24 [style=solid label="FLOAT_LITERAL"]
  73 -> 25 [style=solid label="DOUBLE_LITERAL"]
  73 -> 106 [style=dashed label="expression"]
  74 [label="State 74\n\l 70 expression: expression EQ • expression\l"]
  74 -> 11 [style=solid label="MINUS"]
  74 -> 12 [style=solid label="LPAREN"]
  74 -> 16 [style=solid label="SIZEOF"]
  74 -> 39 [style=solid label="IDENTIFIER"]
  74 -> 20 [style=solid label="INT_LITERAL"]
  74 -> 21 [style=solid label="STRING_LITERAL"]
  74 -> 22 [style=solid label="CHAR"]
  74 -> 23 [style=solid label="BOOLEAN"]
  74 -> 24 [style=solid label="FLOAT_LITERAL"]
  74 -> 25 [style=solid label="DOUBLE_LITERAL"]
  74 -> 107 [style=dashed label="expression"]
  75 [label="State 75\n\l 71 expression: expression NE • expression\l"]
  75 -> 11 [style=solid label="MINUS"]
  75 -> 12 [style=solid label="LPAREN"]
  75 -> 16 [style=solid label="SIZEOF"]
  75 -> 39 [style=solid label="IDENTIFIER"]
  75 -> 20 [style=solid label="INT_LITERAL"]
  75 -> 21 [style=solid label="STRING_LITERAL"]
  75 -> 22 [style=solid label="CHAR"]
  75 -> 23 [style=solid label="BOOLEAN"]
  75 -> 24 [style=solid label="FLOAT_LITERAL"]
  75 -> 25 [style=solid label="DOUBLE_LITERAL"]
  75 -> 108 [style=dashed label="expression"]
  76 [label="State 76\n\l 72 expression: expression AND • expression\l"]
  76 -> 11 [style=solid label="MINUS"]
  76 -> 12 [style=solid label="LPAREN"]
  76 -> 16 [style=solid label="SIZEOF"]
  76 -> 39 [style=solid label="IDENTIFIER"]
  76 -> 20 [style=solid label="INT_LITERAL"]
  76 -> 21 [style=solid label="STRING_LITERAL"]
  76 -> 22 [style=solid label="CHAR"]
  76 -> 23 [style=solid label="BOOLEAN"]
  76 -> 24 [style=solid label="FLOAT_LITERAL"]
  76 -> 25 [style=solid label="DOUBLE_LITERAL"]
  76 -> 109 [style=dashed label="expression"]
  77 [label="State 77\n\l 73 expression: expression OR • expression\l"]
  77 -> 11 [style=solid label="MINUS"]
  77 -> 12 [style=solid label="LPAREN"]
  77 -> 16 [style=solid label="SIZEOF"]
  77 -> 39 [style=solid label="IDENTIFIER"]
  77 -> 20 [style=solid label="INT_LITERAL"]
  77 -> 21 [style=solid label="STRING_LITERAL"]
  77 -> 22 [style=solid label="CHAR"]
  77 -> 23 [style=solid label="BOOLEAN"]
  77 -> 24 [style=solid label="FLOAT_LITERAL"]
  77 -> 25 [style=solid label="DOUBLE_LITERAL"]
  77 -> 110 [style=dashed label="expression"]
  78 [label="State 78\n\l 78 expression: expression DEC •\l"]
  78 -> "78R78" [style=solid]
 "78R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l 77 expression: expression INC •\l"]
  79 -> "79R77" [style=solid]
 "79R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l 51 error_statement: BAKA LPAREN expression • RPAREN\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  80 -> 64 [style=solid label="PLUS"]
  80 -> 65 [style=solid label="MINUS"]
  80 -> 66 [style=solid label="TIMES"]
  80 -> 67 [style=solid label="DIVIDE"]
  80 -> 68 [style=solid label="MOD"]
  80 -> 111 [style=solid label="RPAREN"]
  80 -> 70 [style=solid label="LT"]
  80 -> 71 [style=solid label="GT"]
  80 -> 72 [style=solid label="LE"]
  80 -> 73 [style=solid label="GE"]
  80 -> 74 [style=solid label="EQ"]
  80 -> 75 [style=solid label="NE"]
  80 -> 76 [style=solid label="AND"]
  80 -> 77 [style=solid label="OR"]
  80 -> 78 [style=solid label="DEC"]
  80 -> 79 [style=solid label="INC"]
  81 [label="State 81\n\l 42 init_expr: declaration •\l"]
  81 -> "81R42" [style=solid]
 "81R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l 40 for_statement: FLEX LPAREN init_expr • SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACE\l"]
  82 -> 112 [style=solid label="SEMICOLON"]
  83 [label="State 83\n\l 43 init_expr: expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  83 -> 64 [style=solid label="PLUS"]
  83 -> 65 [style=solid label="MINUS"]
  83 -> 66 [style=solid label="TIMES"]
  83 -> 67 [style=solid label="DIVIDE"]
  83 -> 68 [style=solid label="MOD"]
  83 -> 70 [style=solid label="LT"]
  83 -> 71 [style=solid label="GT"]
  83 -> 72 [style=solid label="LE"]
  83 -> 73 [style=solid label="GE"]
  83 -> 74 [style=solid label="EQ"]
  83 -> 75 [style=solid label="NE"]
  83 -> 76 [style=solid label="AND"]
  83 -> 77 [style=solid label="OR"]
  83 -> 78 [style=solid label="DEC"]
  83 -> 79 [style=solid label="INC"]
  83 -> "83R43" [style=solid]
 "83R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l 75 expression: LPAREN expression RPAREN •\l"]
  84 -> "84R75" [style=solid]
 "84R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l 21 if_statement: IF LPAREN expression • RPAREN LBRACE statements RBRACE\l 22             | IF LPAREN expression • RPAREN LBRACE statements RBRACE ELSE if_statement\l 23             | IF LPAREN expression • RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  85 -> 64 [style=solid label="PLUS"]
  85 -> 65 [style=solid label="MINUS"]
  85 -> 66 [style=solid label="TIMES"]
  85 -> 67 [style=solid label="DIVIDE"]
  85 -> 68 [style=solid label="MOD"]
  85 -> 113 [style=solid label="RPAREN"]
  85 -> 70 [style=solid label="LT"]
  85 -> 71 [style=solid label="GT"]
  85 -> 72 [style=solid label="LE"]
  85 -> 73 [style=solid label="GE"]
  85 -> 74 [style=solid label="EQ"]
  85 -> 75 [style=solid label="NE"]
  85 -> 76 [style=solid label="AND"]
  85 -> 77 [style=solid label="OR"]
  85 -> 78 [style=solid label="DEC"]
  85 -> 79 [style=solid label="INC"]
  86 [label="State 86\n\l 59 expression: SIZEOF LPAREN IDENTIFIER • RPAREN\l"]
  86 -> 114 [style=solid label="RPAREN"]
  87 [label="State 87\n\l 15 switch_statement: SWITCH LPAREN expression • RPAREN LBRACE case_list RBRACE\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  87 -> 64 [style=solid label="PLUS"]
  87 -> 65 [style=solid label="MINUS"]
  87 -> 66 [style=solid label="TIMES"]
  87 -> 67 [style=solid label="DIVIDE"]
  87 -> 68 [style=solid label="MOD"]
  87 -> 115 [style=solid label="RPAREN"]
  87 -> 70 [style=solid label="LT"]
  87 -> 71 [style=solid label="GT"]
  87 -> 72 [style=solid label="LE"]
  87 -> 73 [style=solid label="GE"]
  87 -> 74 [style=solid label="EQ"]
  87 -> 75 [style=solid label="NE"]
  87 -> 76 [style=solid label="AND"]
  87 -> 77 [style=solid label="OR"]
  87 -> 78 [style=solid label="DEC"]
  87 -> 79 [style=solid label="INC"]
  88 [label="State 88\n\l 41 while_statement: GOON LPAREN expression • RPAREN LBRACE statements RBRACE\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  88 -> 64 [style=solid label="PLUS"]
  88 -> 65 [style=solid label="MINUS"]
  88 -> 66 [style=solid label="TIMES"]
  88 -> 67 [style=solid label="DIVIDE"]
  88 -> 68 [style=solid label="MOD"]
  88 -> 116 [style=solid label="RPAREN"]
  88 -> 70 [style=solid label="LT"]
  88 -> 71 [style=solid label="GT"]
  88 -> 72 [style=solid label="LE"]
  88 -> 73 [style=solid label="GE"]
  88 -> 74 [style=solid label="EQ"]
  88 -> 75 [style=solid label="NE"]
  88 -> 76 [style=solid label="AND"]
  88 -> 77 [style=solid label="OR"]
  88 -> 78 [style=solid label="DEC"]
  88 -> 79 [style=solid label="INC"]
  89 [label="State 89\n\l 46 function_call: IDENTIFIER LPAREN arg_list • RPAREN\l"]
  89 -> 117 [style=solid label="RPAREN"]
  90 [label="State 90\n\l 48 arg_list: argument_list •\l 50 argument_list: argument_list • COMMA expression\l"]
  90 -> 118 [style=solid label="COMMA"]
  90 -> "90R48" [style=solid]
 "90R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  91 [label="State 91\n\l 49 argument_list: expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  91 -> 64 [style=solid label="PLUS"]
  91 -> 65 [style=solid label="MINUS"]
  91 -> 66 [style=solid label="TIMES"]
  91 -> 67 [style=solid label="DIVIDE"]
  91 -> 68 [style=solid label="MOD"]
  91 -> 70 [style=solid label="LT"]
  91 -> 71 [style=solid label="GT"]
  91 -> 72 [style=solid label="LE"]
  91 -> 73 [style=solid label="GE"]
  91 -> 74 [style=solid label="EQ"]
  91 -> 75 [style=solid label="NE"]
  91 -> 76 [style=solid label="AND"]
  91 -> 77 [style=solid label="OR"]
  91 -> 78 [style=solid label="DEC"]
  91 -> 79 [style=solid label="INC"]
  91 -> "91R49" [style=solid]
 "91R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l 60 expression: IDENTIFIER EQUALS expression •\l 61           | expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  92 -> 64 [style=solid label="PLUS"]
  92 -> 65 [style=solid label="MINUS"]
  92 -> 66 [style=solid label="TIMES"]
  92 -> 67 [style=solid label="DIVIDE"]
  92 -> 68 [style=solid label="MOD"]
  92 -> 70 [style=solid label="LT"]
  92 -> 71 [style=solid label="GT"]
  92 -> 72 [style=solid label="LE"]
  92 -> 73 [style=solid label="GE"]
  92 -> 74 [style=solid label="EQ"]
  92 -> 75 [style=solid label="NE"]
  92 -> 76 [style=solid label="AND"]
  92 -> 77 [style=solid label="OR"]
  92 -> 78 [style=solid label="DEC"]
  92 -> 79 [style=solid label="INC"]
  92 -> "92R60" [style=solid]
 "92R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l 24 declaration: optional_modifiers RIZZ IDENTIFIER •\l 25            | optional_modifiers RIZZ IDENTIFIER • EQUALS expression\l"]
  93 -> 119 [style=solid label="EQUALS"]
  93 -> "93R24" [style=solid]
 "93R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l 30 declaration: optional_modifiers YAP IDENTIFIER •\l 31            | optional_modifiers YAP IDENTIFIER • EQUALS expression\l"]
  94 -> 120 [style=solid label="EQUALS"]
  94 -> "94R30" [style=solid]
 "94R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l 32 declaration: optional_modifiers CAP IDENTIFIER •\l 33            | optional_modifiers CAP IDENTIFIER • EQUALS expression\l"]
  95 -> 121 [style=solid label="EQUALS"]
  95 -> "95R32" [style=solid]
 "95R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l 26 declaration: optional_modifiers CHAD IDENTIFIER •\l 27            | optional_modifiers CHAD IDENTIFIER • EQUALS expression\l"]
  96 -> 122 [style=solid label="EQUALS"]
  96 -> "96R26" [style=solid]
 "96R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l 28 declaration: optional_modifiers GIGACHAD IDENTIFIER •\l 29            | optional_modifiers GIGACHAD IDENTIFIER • EQUALS expression\l"]
  97 -> 123 [style=solid label="EQUALS"]
  97 -> "97R28" [style=solid]
 "97R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 61 expression: expression • PLUS expression\l 61           | expression PLUS expression •\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  98 -> 66 [style=solid label="TIMES"]
  98 -> 67 [style=solid label="DIVIDE"]
  98 -> 68 [style=solid label="MOD"]
  98 -> "98R61" [style=solid]
 "98R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 62           | expression MINUS expression •\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  99 -> 66 [style=solid label="TIMES"]
  99 -> 67 [style=solid label="DIVIDE"]
  99 -> 68 [style=solid label="MOD"]
  99 -> "99R62" [style=solid]
 "99R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 63           | expression TIMES expression •\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  100 -> "100R63" [style=solid]
 "100R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 64           | expression DIVIDE expression •\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  101 -> "101R64" [style=solid]
 "101R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 65           | expression MOD expression •\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  102 -> "102R65" [style=solid]
 "102R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 66           | expression LT expression •\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  103 -> 64 [style=solid label="PLUS"]
  103 -> 65 [style=solid label="MINUS"]
  103 -> 66 [style=solid label="TIMES"]
  103 -> 67 [style=solid label="DIVIDE"]
  103 -> 68 [style=solid label="MOD"]
  103 -> "103R66" [style=solid]
 "103R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 67           | expression GT expression •\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  104 -> 64 [style=solid label="PLUS"]
  104 -> 65 [style=solid label="MINUS"]
  104 -> 66 [style=solid label="TIMES"]
  104 -> 67 [style=solid label="DIVIDE"]
  104 -> 68 [style=solid label="MOD"]
  104 -> "104R67" [style=solid]
 "104R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 68           | expression LE expression •\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  105 -> 64 [style=solid label="PLUS"]
  105 -> 65 [style=solid label="MINUS"]
  105 -> 66 [style=solid label="TIMES"]
  105 -> 67 [style=solid label="DIVIDE"]
  105 -> 68 [style=solid label="MOD"]
  105 -> "105R68" [style=solid]
 "105R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 69           | expression GE expression •\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  106 -> 64 [style=solid label="PLUS"]
  106 -> 65 [style=solid label="MINUS"]
  106 -> 66 [style=solid label="TIMES"]
  106 -> 67 [style=solid label="DIVIDE"]
  106 -> 68 [style=solid label="MOD"]
  106 -> "106R69" [style=solid]
 "106R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 70           | expression EQ expression •\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  107 -> 64 [style=solid label="PLUS"]
  107 -> 65 [style=solid label="MINUS"]
  107 -> 66 [style=solid label="TIMES"]
  107 -> 67 [style=solid label="DIVIDE"]
  107 -> 68 [style=solid label="MOD"]
  107 -> 70 [style=solid label="LT"]
  107 -> 71 [style=solid label="GT"]
  107 -> 72 [style=solid label="LE"]
  107 -> 73 [style=solid label="GE"]
  107 -> 78 [style=solid label="DEC"]
  107 -> 79 [style=solid label="INC"]
  107 -> "107R70" [style=solid]
 "107R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 71           | expression NE expression •\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  108 -> 64 [style=solid label="PLUS"]
  108 -> 65 [style=solid label="MINUS"]
  108 -> 66 [style=solid label="TIMES"]
  108 -> 67 [style=solid label="DIVIDE"]
  108 -> 68 [style=solid label="MOD"]
  108 -> 70 [style=solid label="LT"]
  108 -> 71 [style=solid label="GT"]
  108 -> 72 [style=solid label="LE"]
  108 -> 73 [style=solid label="GE"]
  108 -> 78 [style=solid label="DEC"]
  108 -> 79 [style=solid label="INC"]
  108 -> "108R71" [style=solid]
 "108R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 72           | expression AND expression •\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  109 -> 64 [style=solid label="PLUS"]
  109 -> 65 [style=solid label="MINUS"]
  109 -> 66 [style=solid label="TIMES"]
  109 -> 67 [style=solid label="DIVIDE"]
  109 -> 68 [style=solid label="MOD"]
  109 -> 70 [style=solid label="LT"]
  109 -> 71 [style=solid label="GT"]
  109 -> 72 [style=solid label="LE"]
  109 -> 73 [style=solid label="GE"]
  109 -> 74 [style=solid label="EQ"]
  109 -> 75 [style=solid label="NE"]
  109 -> 78 [style=solid label="DEC"]
  109 -> 79 [style=solid label="INC"]
  109 -> "109R72" [style=solid]
 "109R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 73           | expression OR expression •\l 77           | expression • INC\l 78           | expression • DEC\l"]
  110 -> 64 [style=solid label="PLUS"]
  110 -> 65 [style=solid label="MINUS"]
  110 -> 66 [style=solid label="TIMES"]
  110 -> 67 [style=solid label="DIVIDE"]
  110 -> 68 [style=solid label="MOD"]
  110 -> 70 [style=solid label="LT"]
  110 -> 71 [style=solid label="GT"]
  110 -> 72 [style=solid label="LE"]
  110 -> 73 [style=solid label="GE"]
  110 -> 74 [style=solid label="EQ"]
  110 -> 75 [style=solid label="NE"]
  110 -> 76 [style=solid label="AND"]
  110 -> 78 [style=solid label="DEC"]
  110 -> 79 [style=solid label="INC"]
  110 -> "110R73" [style=solid]
 "110R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l 51 error_statement: BAKA LPAREN expression RPAREN •\l"]
  111 -> "111R51" [style=solid]
 "111R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON • condition SEMICOLON increment RPAREN LBRACE statements RBRACE\l"]
  112 -> 11 [style=solid label="MINUS"]
  112 -> 12 [style=solid label="LPAREN"]
  112 -> 16 [style=solid label="SIZEOF"]
  112 -> 39 [style=solid label="IDENTIFIER"]
  112 -> 20 [style=solid label="INT_LITERAL"]
  112 -> 21 [style=solid label="STRING_LITERAL"]
  112 -> 22 [style=solid label="CHAR"]
  112 -> 23 [style=solid label="BOOLEAN"]
  112 -> 24 [style=solid label="FLOAT_LITERAL"]
  112 -> 25 [style=solid label="DOUBLE_LITERAL"]
  112 -> 124 [style=dashed label="condition"]
  112 -> 125 [style=dashed label="expression"]
  113 [label="State 113\n\l 21 if_statement: IF LPAREN expression RPAREN • LBRACE statements RBRACE\l 22             | IF LPAREN expression RPAREN • LBRACE statements RBRACE ELSE if_statement\l 23             | IF LPAREN expression RPAREN • LBRACE statements RBRACE ELSE LBRACE statements RBRACE\l"]
  113 -> 126 [style=solid label="LBRACE"]
  114 [label="State 114\n\l 59 expression: SIZEOF LPAREN IDENTIFIER RPAREN •\l"]
  114 -> "114R59" [style=solid]
 "114R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l 15 switch_statement: SWITCH LPAREN expression RPAREN • LBRACE case_list RBRACE\l"]
  115 -> 127 [style=solid label="LBRACE"]
  116 [label="State 116\n\l 41 while_statement: GOON LPAREN expression RPAREN • LBRACE statements RBRACE\l"]
  116 -> 128 [style=solid label="LBRACE"]
  117 [label="State 117\n\l 46 function_call: IDENTIFIER LPAREN arg_list RPAREN •\l"]
  117 -> "117R46" [style=solid]
 "117R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l 50 argument_list: argument_list COMMA • expression\l"]
  118 -> 11 [style=solid label="MINUS"]
  118 -> 12 [style=solid label="LPAREN"]
  118 -> 16 [style=solid label="SIZEOF"]
  118 -> 39 [style=solid label="IDENTIFIER"]
  118 -> 20 [style=solid label="INT_LITERAL"]
  118 -> 21 [style=solid label="STRING_LITERAL"]
  118 -> 22 [style=solid label="CHAR"]
  118 -> 23 [style=solid label="BOOLEAN"]
  118 -> 24 [style=solid label="FLOAT_LITERAL"]
  118 -> 25 [style=solid label="DOUBLE_LITERAL"]
  118 -> 129 [style=dashed label="expression"]
  119 [label="State 119\n\l 25 declaration: optional_modifiers RIZZ IDENTIFIER EQUALS • expression\l"]
  119 -> 11 [style=solid label="MINUS"]
  119 -> 12 [style=solid label="LPAREN"]
  119 -> 16 [style=solid label="SIZEOF"]
  119 -> 39 [style=solid label="IDENTIFIER"]
  119 -> 20 [style=solid label="INT_LITERAL"]
  119 -> 21 [style=solid label="STRING_LITERAL"]
  119 -> 22 [style=solid label="CHAR"]
  119 -> 23 [style=solid label="BOOLEAN"]
  119 -> 24 [style=solid label="FLOAT_LITERAL"]
  119 -> 25 [style=solid label="DOUBLE_LITERAL"]
  119 -> 130 [style=dashed label="expression"]
  120 [label="State 120\n\l 31 declaration: optional_modifiers YAP IDENTIFIER EQUALS • expression\l"]
  120 -> 11 [style=solid label="MINUS"]
  120 -> 12 [style=solid label="LPAREN"]
  120 -> 16 [style=solid label="SIZEOF"]
  120 -> 39 [style=solid label="IDENTIFIER"]
  120 -> 20 [style=solid label="INT_LITERAL"]
  120 -> 21 [style=solid label="STRING_LITERAL"]
  120 -> 22 [style=solid label="CHAR"]
  120 -> 23 [style=solid label="BOOLEAN"]
  120 -> 24 [style=solid label="FLOAT_LITERAL"]
  120 -> 25 [style=solid label="DOUBLE_LITERAL"]
  120 -> 131 [style=dashed label="expression"]
  121 [label="State 121\n\l 33 declaration: optional_modifiers CAP IDENTIFIER EQUALS • expression\l"]
  121 -> 11 [style=solid label="MINUS"]
  121 -> 12 [style=solid label="LPAREN"]
  121 -> 16 [style=solid label="SIZEOF"]
  121 -> 39 [style=solid label="IDENTIFIER"]
  121 -> 20 [style=solid label="INT_LITERAL"]
  121 -> 21 [style=solid label="STRING_LITERAL"]
  121 -> 22 [style=solid label="CHAR"]
  121 -> 23 [style=solid label="BOOLEAN"]
  121 -> 24 [style=solid label="FLOAT_LITERAL"]
  121 -> 25 [style=solid label="DOUBLE_LITERAL"]
  121 -> 132 [style=dashed label="expression"]
  122 [label="State 122\n\l 27 declaration: optional_modifiers CHAD IDENTIFIER EQUALS • expression\l"]
  122 -> 11 [style=solid label="MINUS"]
  122 -> 12 [style=solid label="LPAREN"]
  122 -> 16 [style=solid label="SIZEOF"]
  122 -> 39 [style=solid label="IDENTIFIER"]
  122 -> 20 [style=solid label="INT_LITERAL"]
  122 -> 21 [style=solid label="STRING_LITERAL"]
  122 -> 22 [style=solid label="CHAR"]
  122 -> 23 [style=solid label="BOOLEAN"]
  122 -> 24 [style=solid label="FLOAT_LITERAL"]
  122 -> 25 [style=solid label="DOUBLE_LITERAL"]
  122 -> 133 [style=dashed label="expression"]
  123 [label="State 123\n\l 29 declaration: optional_modifiers GIGACHAD IDENTIFIER EQUALS • expression\l"]
  123 -> 11 [style=solid label="MINUS"]
  123 -> 12 [style=solid label="LPAREN"]
  123 -> 16 [style=solid label="SIZEOF"]
  123 -> 39 [style=solid label="IDENTIFIER"]
  123 -> 20 [style=solid label="INT_LITERAL"]
  123 -> 21 [style=solid label="STRING_LITERAL"]
  123 -> 22 [style=solid label="CHAR"]
  123 -> 23 [style=solid label="BOOLEAN"]
  123 -> 24 [style=solid label="FLOAT_LITERAL"]
  123 -> 25 [style=solid label="DOUBLE_LITERAL"]
  123 -> 134 [style=dashed label="expression"]
  124 [label="State 124\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition • SEMICOLON increment RPAREN LBRACE statements RBRACE\l"]
  124 -> 135 [style=solid label="SEMICOLON"]
  125 [label="State 125\n\l 44 condition: expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  125 -> 64 [style=solid label="PLUS"]
  125 -> 65 [style=solid label="MINUS"]
  125 -> 66 [style=solid label="TIMES"]
  125 -> 67 [style=solid label="DIVIDE"]
  125 -> 68 [style=solid label="MOD"]
  125 -> 70 [style=solid label="LT"]
  125 -> 71 [style=solid label="GT"]
  125 -> 72 [style=solid label="LE"]
  125 -> 73 [style=solid label="GE"]
  125 -> 74 [style=solid label="EQ"]
  125 -> 75 [style=solid label="NE"]
  125 -> 76 [style=solid label="AND"]
  125 -> 77 [style=solid label="OR"]
  125 -> 78 [style=solid label="DEC"]
  125 -> 79 [style=solid label="INC"]
  125 -> "125R44" [style=solid]
 "125R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l 21 if_statement: IF LPAREN expression RPAREN LBRACE • statements RBRACE\l 22             | IF LPAREN expression RPAREN LBRACE • statements RBRACE ELSE if_statement\l 23             | IF LPAREN expression RPAREN LBRACE • statements RBRACE ELSE LBRACE statements RBRACE\l"]
  126 -> 136 [style=dashed label="statements"]
  126 -> "126R3" [style=solid]
 "126R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  127 [label="State 127\n\l 15 switch_statement: SWITCH LPAREN expression RPAREN LBRACE • case_list RBRACE\l"]
  127 -> 137 [style=dashed label="case_list"]
  127 -> "127R16" [style=solid]
 "127R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l 41 while_statement: GOON LPAREN expression RPAREN LBRACE • statements RBRACE\l"]
  128 -> 138 [style=dashed label="statements"]
  128 -> "128R3" [style=solid]
 "128R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l 50 argument_list: argument_list COMMA expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  129 -> 64 [style=solid label="PLUS"]
  129 -> 65 [style=solid label="MINUS"]
  129 -> 66 [style=solid label="TIMES"]
  129 -> 67 [style=solid label="DIVIDE"]
  129 -> 68 [style=solid label="MOD"]
  129 -> 70 [style=solid label="LT"]
  129 -> 71 [style=solid label="GT"]
  129 -> 72 [style=solid label="LE"]
  129 -> 73 [style=solid label="GE"]
  129 -> 74 [style=solid label="EQ"]
  129 -> 75 [style=solid label="NE"]
  129 -> 76 [style=solid label="AND"]
  129 -> 77 [style=solid label="OR"]
  129 -> 78 [style=solid label="DEC"]
  129 -> 79 [style=solid label="INC"]
  129 -> "129R50" [style=solid]
 "129R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 25 declaration: optional_modifiers RIZZ IDENTIFIER EQUALS expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  130 -> 64 [style=solid label="PLUS"]
  130 -> 65 [style=solid label="MINUS"]
  130 -> 66 [style=solid label="TIMES"]
  130 -> 67 [style=solid label="DIVIDE"]
  130 -> 68 [style=solid label="MOD"]
  130 -> 70 [style=solid label="LT"]
  130 -> 71 [style=solid label="GT"]
  130 -> 72 [style=solid label="LE"]
  130 -> 73 [style=solid label="GE"]
  130 -> 74 [style=solid label="EQ"]
  130 -> 75 [style=solid label="NE"]
  130 -> 76 [style=solid label="AND"]
  130 -> 77 [style=solid label="OR"]
  130 -> 78 [style=solid label="DEC"]
  130 -> 79 [style=solid label="INC"]
  130 -> "130R25" [style=solid]
 "130R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l 31 declaration: optional_modifiers YAP IDENTIFIER EQUALS expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  131 -> 64 [style=solid label="PLUS"]
  131 -> 65 [style=solid label="MINUS"]
  131 -> 66 [style=solid label="TIMES"]
  131 -> 67 [style=solid label="DIVIDE"]
  131 -> 68 [style=solid label="MOD"]
  131 -> 70 [style=solid label="LT"]
  131 -> 71 [style=solid label="GT"]
  131 -> 72 [style=solid label="LE"]
  131 -> 73 [style=solid label="GE"]
  131 -> 74 [style=solid label="EQ"]
  131 -> 75 [style=solid label="NE"]
  131 -> 76 [style=solid label="AND"]
  131 -> 77 [style=solid label="OR"]
  131 -> 78 [style=solid label="DEC"]
  131 -> 79 [style=solid label="INC"]
  131 -> "131R31" [style=solid]
 "131R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 33 declaration: optional_modifiers CAP IDENTIFIER EQUALS expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  132 -> 64 [style=solid label="PLUS"]
  132 -> 65 [style=solid label="MINUS"]
  132 -> 66 [style=solid label="TIMES"]
  132 -> 67 [style=solid label="DIVIDE"]
  132 -> 68 [style=solid label="MOD"]
  132 -> 70 [style=solid label="LT"]
  132 -> 71 [style=solid label="GT"]
  132 -> 72 [style=solid label="LE"]
  132 -> 73 [style=solid label="GE"]
  132 -> 74 [style=solid label="EQ"]
  132 -> 75 [style=solid label="NE"]
  132 -> 76 [style=solid label="AND"]
  132 -> 77 [style=solid label="OR"]
  132 -> 78 [style=solid label="DEC"]
  132 -> 79 [style=solid label="INC"]
  132 -> "132R33" [style=solid]
 "132R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l 27 declaration: optional_modifiers CHAD IDENTIFIER EQUALS expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  133 -> 64 [style=solid label="PLUS"]
  133 -> 65 [style=solid label="MINUS"]
  133 -> 66 [style=solid label="TIMES"]
  133 -> 67 [style=solid label="DIVIDE"]
  133 -> 68 [style=solid label="MOD"]
  133 -> 70 [style=solid label="LT"]
  133 -> 71 [style=solid label="GT"]
  133 -> 72 [style=solid label="LE"]
  133 -> 73 [style=solid label="GE"]
  133 -> 74 [style=solid label="EQ"]
  133 -> 75 [style=solid label="NE"]
  133 -> 76 [style=solid label="AND"]
  133 -> 77 [style=solid label="OR"]
  133 -> 78 [style=solid label="DEC"]
  133 -> 79 [style=solid label="INC"]
  133 -> "133R27" [style=solid]
 "133R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 29 declaration: optional_modifiers GIGACHAD IDENTIFIER EQUALS expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  134 -> 64 [style=solid label="PLUS"]
  134 -> 65 [style=solid label="MINUS"]
  134 -> 66 [style=solid label="TIMES"]
  134 -> 67 [style=solid label="DIVIDE"]
  134 -> 68 [style=solid label="MOD"]
  134 -> 70 [style=solid label="LT"]
  134 -> 71 [style=solid label="GT"]
  134 -> 72 [style=solid label="LE"]
  134 -> 73 [style=solid label="GE"]
  134 -> 74 [style=solid label="EQ"]
  134 -> 75 [style=solid label="NE"]
  134 -> 76 [style=solid label="AND"]
  134 -> 77 [style=solid label="OR"]
  134 -> 78 [style=solid label="DEC"]
  134 -> 79 [style=solid label="INC"]
  134 -> "134R29" [style=solid]
 "134R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  135 [label="State 135\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON • increment RPAREN LBRACE statements RBRACE\l"]
  135 -> 11 [style=solid label="MINUS"]
  135 -> 12 [style=solid label="LPAREN"]
  135 -> 16 [style=solid label="SIZEOF"]
  135 -> 39 [style=solid label="IDENTIFIER"]
  135 -> 20 [style=solid label="INT_LITERAL"]
  135 -> 21 [style=solid label="STRING_LITERAL"]
  135 -> 22 [style=solid label="CHAR"]
  135 -> 23 [style=solid label="BOOLEAN"]
  135 -> 24 [style=solid label="FLOAT_LITERAL"]
  135 -> 25 [style=solid label="DOUBLE_LITERAL"]
  135 -> 139 [style=dashed label="increment"]
  135 -> 140 [style=dashed label="expression"]
  136 [label="State 136\n\l  4 statements: statements • statement\l 21 if_statement: IF LPAREN expression RPAREN LBRACE statements • RBRACE\l 22             | IF LPAREN expression RPAREN LBRACE statements • RBRACE ELSE if_statement\l 23             | IF LPAREN expression RPAREN LBRACE statements • RBRACE ELSE LBRACE statements RBRACE\l"]
  136 -> 8 [style=solid label="BAKA"]
  136 -> 9 [style=solid label="BUSSIN"]
  136 -> 10 [style=solid label="FLEX"]
  136 -> 11 [style=solid label="MINUS"]
  136 -> 12 [style=solid label="LPAREN"]
  136 -> 141 [style=solid label="RBRACE"]
  136 -> 14 [style=solid label="BREAK"]
  136 -> 15 [style=solid label="IF"]
  136 -> 16 [style=solid label="SIZEOF"]
  136 -> 17 [style=solid label="SWITCH"]
  136 -> 18 [style=solid label="GOON"]
  136 -> 19 [style=solid label="IDENTIFIER"]
  136 -> 20 [style=solid label="INT_LITERAL"]
  136 -> 21 [style=solid label="STRING_LITERAL"]
  136 -> 22 [style=solid label="CHAR"]
  136 -> 23 [style=solid label="BOOLEAN"]
  136 -> 24 [style=solid label="FLOAT_LITERAL"]
  136 -> 25 [style=solid label="DOUBLE_LITERAL"]
  136 -> 26 [style=dashed label="statement"]
  136 -> 27 [style=dashed label="switch_statement"]
  136 -> 28 [style=dashed label="break_statement"]
  136 -> 29 [style=dashed label="if_statement"]
  136 -> 30 [style=dashed label="declaration"]
  136 -> 31 [style=dashed label="optional_modifiers"]
  136 -> 32 [style=dashed label="for_statement"]
  136 -> 33 [style=dashed label="while_statement"]
  136 -> 34 [style=dashed label="function_call"]
  136 -> 35 [style=dashed label="error_statement"]
  136 -> 36 [style=dashed label="return_statement"]
  136 -> 37 [style=dashed label="expression"]
  136 -> "136R34" [style=solid]
 "136R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  137 [label="State 137\n\l 15 switch_statement: SWITCH LPAREN expression RPAREN LBRACE case_list • RBRACE\l 17 case_list: case_list • case_clause\l"]
  137 -> 142 [style=solid label="RBRACE"]
  137 -> 143 [style=solid label="CASE"]
  137 -> 144 [style=solid label="DEFAULT"]
  137 -> 145 [style=dashed label="case_clause"]
  138 [label="State 138\n\l  4 statements: statements • statement\l 41 while_statement: GOON LPAREN expression RPAREN LBRACE statements • RBRACE\l"]
  138 -> 8 [style=solid label="BAKA"]
  138 -> 9 [style=solid label="BUSSIN"]
  138 -> 10 [style=solid label="FLEX"]
  138 -> 11 [style=solid label="MINUS"]
  138 -> 12 [style=solid label="LPAREN"]
  138 -> 146 [style=solid label="RBRACE"]
  138 -> 14 [style=solid label="BREAK"]
  138 -> 15 [style=solid label="IF"]
  138 -> 16 [style=solid label="SIZEOF"]
  138 -> 17 [style=solid label="SWITCH"]
  138 -> 18 [style=solid label="GOON"]
  138 -> 19 [style=solid label="IDENTIFIER"]
  138 -> 20 [style=solid label="INT_LITERAL"]
  138 -> 21 [style=solid label="STRING_LITERAL"]
  138 -> 22 [style=solid label="CHAR"]
  138 -> 23 [style=solid label="BOOLEAN"]
  138 -> 24 [style=solid label="FLOAT_LITERAL"]
  138 -> 25 [style=solid label="DOUBLE_LITERAL"]
  138 -> 26 [style=dashed label="statement"]
  138 -> 27 [style=dashed label="switch_statement"]
  138 -> 28 [style=dashed label="break_statement"]
  138 -> 29 [style=dashed label="if_statement"]
  138 -> 30 [style=dashed label="declaration"]
  138 -> 31 [style=dashed label="optional_modifiers"]
  138 -> 32 [style=dashed label="for_statement"]
  138 -> 33 [style=dashed label="while_statement"]
  138 -> 34 [style=dashed label="function_call"]
  138 -> 35 [style=dashed label="error_statement"]
  138 -> 36 [style=dashed label="return_statement"]
  138 -> 37 [style=dashed label="expression"]
  138 -> "138R34" [style=solid]
 "138R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  139 [label="State 139\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON increment • RPAREN LBRACE statements RBRACE\l"]
  139 -> 147 [style=solid label="RPAREN"]
  140 [label="State 140\n\l 45 increment: expression •\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  140 -> 64 [style=solid label="PLUS"]
  140 -> 65 [style=solid label="MINUS"]
  140 -> 66 [style=solid label="TIMES"]
  140 -> 67 [style=solid label="DIVIDE"]
  140 -> 68 [style=solid label="MOD"]
  140 -> 70 [style=solid label="LT"]
  140 -> 71 [style=solid label="GT"]
  140 -> 72 [style=solid label="LE"]
  140 -> 73 [style=solid label="GE"]
  140 -> 74 [style=solid label="EQ"]
  140 -> 75 [style=solid label="NE"]
  140 -> 76 [style=solid label="AND"]
  140 -> 77 [style=solid label="OR"]
  140 -> 78 [style=solid label="DEC"]
  140 -> 79 [style=solid label="INC"]
  140 -> "140R45" [style=solid]
 "140R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l 21 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE •\l 22             | IF LPAREN expression RPAREN LBRACE statements RBRACE • ELSE if_statement\l 23             | IF LPAREN expression RPAREN LBRACE statements RBRACE • ELSE LBRACE statements RBRACE\l"]
  141 -> 148 [style=solid label="ELSE"]
  141 -> "141R21" [style=solid]
 "141R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l 15 switch_statement: SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE •\l"]
  142 -> "142R15" [style=solid]
 "142R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  143 [label="State 143\n\l 18 case_clause: CASE • expression COLON statements\l"]
  143 -> 11 [style=solid label="MINUS"]
  143 -> 12 [style=solid label="LPAREN"]
  143 -> 16 [style=solid label="SIZEOF"]
  143 -> 39 [style=solid label="IDENTIFIER"]
  143 -> 20 [style=solid label="INT_LITERAL"]
  143 -> 21 [style=solid label="STRING_LITERAL"]
  143 -> 22 [style=solid label="CHAR"]
  143 -> 23 [style=solid label="BOOLEAN"]
  143 -> 24 [style=solid label="FLOAT_LITERAL"]
  143 -> 25 [style=solid label="DOUBLE_LITERAL"]
  143 -> 149 [style=dashed label="expression"]
  144 [label="State 144\n\l 19 case_clause: DEFAULT • COLON statements\l"]
  144 -> 150 [style=solid label="COLON"]
  145 [label="State 145\n\l 17 case_list: case_list case_clause •\l"]
  145 -> "145R17" [style=solid]
 "145R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l 41 while_statement: GOON LPAREN expression RPAREN LBRACE statements RBRACE •\l"]
  146 -> "146R41" [style=solid]
 "146R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  147 [label="State 147\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON increment RPAREN • LBRACE statements RBRACE\l"]
  147 -> 151 [style=solid label="LBRACE"]
  148 [label="State 148\n\l 22 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE • if_statement\l 23             | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE • LBRACE statements RBRACE\l"]
  148 -> 152 [style=solid label="LBRACE"]
  148 -> 15 [style=solid label="IF"]
  148 -> 153 [style=dashed label="if_statement"]
  149 [label="State 149\n\l 18 case_clause: CASE expression • COLON statements\l 61 expression: expression • PLUS expression\l 62           | expression • MINUS expression\l 63           | expression • TIMES expression\l 64           | expression • DIVIDE expression\l 65           | expression • MOD expression\l 66           | expression • LT expression\l 67           | expression • GT expression\l 68           | expression • LE expression\l 69           | expression • GE expression\l 70           | expression • EQ expression\l 71           | expression • NE expression\l 72           | expression • AND expression\l 73           | expression • OR expression\l 77           | expression • INC\l 78           | expression • DEC\l"]
  149 -> 64 [style=solid label="PLUS"]
  149 -> 65 [style=solid label="MINUS"]
  149 -> 66 [style=solid label="TIMES"]
  149 -> 67 [style=solid label="DIVIDE"]
  149 -> 68 [style=solid label="MOD"]
  149 -> 154 [style=solid label="COLON"]
  149 -> 70 [style=solid label="LT"]
  149 -> 71 [style=solid label="GT"]
  149 -> 72 [style=solid label="LE"]
  149 -> 73 [style=solid label="GE"]
  149 -> 74 [style=solid label="EQ"]
  149 -> 75 [style=solid label="NE"]
  149 -> 76 [style=solid label="AND"]
  149 -> 77 [style=solid label="OR"]
  149 -> 78 [style=solid label="DEC"]
  149 -> 79 [style=solid label="INC"]
  150 [label="State 150\n\l 19 case_clause: DEFAULT COLON • statements\l"]
  150 -> 155 [style=dashed label="statements"]
  150 -> "150R3" [style=solid]
 "150R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON increment RPAREN LBRACE • statements RBRACE\l"]
  151 -> 156 [style=dashed label="statements"]
  151 -> "151R3" [style=solid]
 "151R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l 23 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE • statements RBRACE\l"]
  152 -> 157 [style=dashed label="statements"]
  152 -> "152R3" [style=solid]
 "152R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  153 [label="State 153\n\l 22 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE if_statement •\l"]
  153 -> "153R22" [style=solid]
 "153R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l 18 case_clause: CASE expression COLON • statements\l"]
  154 -> 158 [style=dashed label="statements"]
  154 -> "154R3" [style=solid]
 "154R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l  4 statements: statements • statement\l 19 case_clause: DEFAULT COLON statements •\l"]
  155 -> 8 [style=solid label="BAKA"]
  155 -> 9 [style=solid label="BUSSIN"]
  155 -> 10 [style=solid label="FLEX"]
  155 -> 11 [style=solid label="MINUS"]
  155 -> 12 [style=solid label="LPAREN"]
  155 -> 14 [style=solid label="BREAK"]
  155 -> 15 [style=solid label="IF"]
  155 -> 16 [style=solid label="SIZEOF"]
  155 -> 17 [style=solid label="SWITCH"]
  155 -> 18 [style=solid label="GOON"]
  155 -> 19 [style=solid label="IDENTIFIER"]
  155 -> 20 [style=solid label="INT_LITERAL"]
  155 -> 21 [style=solid label="STRING_LITERAL"]
  155 -> 22 [style=solid label="CHAR"]
  155 -> 23 [style=solid label="BOOLEAN"]
  155 -> 24 [style=solid label="FLOAT_LITERAL"]
  155 -> 25 [style=solid label="DOUBLE_LITERAL"]
  155 -> 26 [style=dashed label="statement"]
  155 -> 27 [style=dashed label="switch_statement"]
  155 -> 28 [style=dashed label="break_statement"]
  155 -> 29 [style=dashed label="if_statement"]
  155 -> 30 [style=dashed label="declaration"]
  155 -> 31 [style=dashed label="optional_modifiers"]
  155 -> 32 [style=dashed label="for_statement"]
  155 -> 33 [style=dashed label="while_statement"]
  155 -> 34 [style=dashed label="function_call"]
  155 -> 35 [style=dashed label="error_statement"]
  155 -> 36 [style=dashed label="return_statement"]
  155 -> 37 [style=dashed label="expression"]
  155 -> "155R19" [label="[RBRACE, CASE, DEFAULT]", style=solid]
 "155R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  155 -> "155R34" [style=solid]
 "155R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l  4 statements: statements • statement\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements • RBRACE\l"]
  156 -> 8 [style=solid label="BAKA"]
  156 -> 9 [style=solid label="BUSSIN"]
  156 -> 10 [style=solid label="FLEX"]
  156 -> 11 [style=solid label="MINUS"]
  156 -> 12 [style=solid label="LPAREN"]
  156 -> 159 [style=solid label="RBRACE"]
  156 -> 14 [style=solid label="BREAK"]
  156 -> 15 [style=solid label="IF"]
  156 -> 16 [style=solid label="SIZEOF"]
  156 -> 17 [style=solid label="SWITCH"]
  156 -> 18 [style=solid label="GOON"]
  156 -> 19 [style=solid label="IDENTIFIER"]
  156 -> 20 [style=solid label="INT_LITERAL"]
  156 -> 21 [style=solid label="STRING_LITERAL"]
  156 -> 22 [style=solid label="CHAR"]
  156 -> 23 [style=solid label="BOOLEAN"]
  156 -> 24 [style=solid label="FLOAT_LITERAL"]
  156 -> 25 [style=solid label="DOUBLE_LITERAL"]
  156 -> 26 [style=dashed label="statement"]
  156 -> 27 [style=dashed label="switch_statement"]
  156 -> 28 [style=dashed label="break_statement"]
  156 -> 29 [style=dashed label="if_statement"]
  156 -> 30 [style=dashed label="declaration"]
  156 -> 31 [style=dashed label="optional_modifiers"]
  156 -> 32 [style=dashed label="for_statement"]
  156 -> 33 [style=dashed label="while_statement"]
  156 -> 34 [style=dashed label="function_call"]
  156 -> 35 [style=dashed label="error_statement"]
  156 -> 36 [style=dashed label="return_statement"]
  156 -> 37 [style=dashed label="expression"]
  156 -> "156R34" [style=solid]
 "156R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l  4 statements: statements • statement\l 23 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements • RBRACE\l"]
  157 -> 8 [style=solid label="BAKA"]
  157 -> 9 [style=solid label="BUSSIN"]
  157 -> 10 [style=solid label="FLEX"]
  157 -> 11 [style=solid label="MINUS"]
  157 -> 12 [style=solid label="LPAREN"]
  157 -> 160 [style=solid label="RBRACE"]
  157 -> 14 [style=solid label="BREAK"]
  157 -> 15 [style=solid label="IF"]
  157 -> 16 [style=solid label="SIZEOF"]
  157 -> 17 [style=solid label="SWITCH"]
  157 -> 18 [style=solid label="GOON"]
  157 -> 19 [style=solid label="IDENTIFIER"]
  157 -> 20 [style=solid label="INT_LITERAL"]
  157 -> 21 [style=solid label="STRING_LITERAL"]
  157 -> 22 [style=solid label="CHAR"]
  157 -> 23 [style=solid label="BOOLEAN"]
  157 -> 24 [style=solid label="FLOAT_LITERAL"]
  157 -> 25 [style=solid label="DOUBLE_LITERAL"]
  157 -> 26 [style=dashed label="statement"]
  157 -> 27 [style=dashed label="switch_statement"]
  157 -> 28 [style=dashed label="break_statement"]
  157 -> 29 [style=dashed label="if_statement"]
  157 -> 30 [style=dashed label="declaration"]
  157 -> 31 [style=dashed label="optional_modifiers"]
  157 -> 32 [style=dashed label="for_statement"]
  157 -> 33 [style=dashed label="while_statement"]
  157 -> 34 [style=dashed label="function_call"]
  157 -> 35 [style=dashed label="error_statement"]
  157 -> 36 [style=dashed label="return_statement"]
  157 -> 37 [style=dashed label="expression"]
  157 -> "157R34" [style=solid]
 "157R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  158 [label="State 158\n\l  4 statements: statements • statement\l 18 case_clause: CASE expression COLON statements •\l"]
  158 -> 8 [style=solid label="BAKA"]
  158 -> 9 [style=solid label="BUSSIN"]
  158 -> 10 [style=solid label="FLEX"]
  158 -> 11 [style=solid label="MINUS"]
  158 -> 12 [style=solid label="LPAREN"]
  158 -> 14 [style=solid label="BREAK"]
  158 -> 15 [style=solid label="IF"]
  158 -> 16 [style=solid label="SIZEOF"]
  158 -> 17 [style=solid label="SWITCH"]
  158 -> 18 [style=solid label="GOON"]
  158 -> 19 [style=solid label="IDENTIFIER"]
  158 -> 20 [style=solid label="INT_LITERAL"]
  158 -> 21 [style=solid label="STRING_LITERAL"]
  158 -> 22 [style=solid label="CHAR"]
  158 -> 23 [style=solid label="BOOLEAN"]
  158 -> 24 [style=solid label="FLOAT_LITERAL"]
  158 -> 25 [style=solid label="DOUBLE_LITERAL"]
  158 -> 26 [style=dashed label="statement"]
  158 -> 27 [style=dashed label="switch_statement"]
  158 -> 28 [style=dashed label="break_statement"]
  158 -> 29 [style=dashed label="if_statement"]
  158 -> 30 [style=dashed label="declaration"]
  158 -> 31 [style=dashed label="optional_modifiers"]
  158 -> 32 [style=dashed label="for_statement"]
  158 -> 33 [style=dashed label="while_statement"]
  158 -> 34 [style=dashed label="function_call"]
  158 -> 35 [style=dashed label="error_statement"]
  158 -> 36 [style=dashed label="return_statement"]
  158 -> 37 [style=dashed label="expression"]
  158 -> "158R18" [label="[RBRACE, CASE, DEFAULT]", style=solid]
 "158R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  158 -> "158R34" [style=solid]
 "158R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  159 [label="State 159\n\l 40 for_statement: FLEX LPAREN init_expr SEMICOLON condition SEMICOLON increment RPAREN LBRACE statements RBRACE •\l"]
  159 -> "159R40" [style=solid]
 "159R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l 23 if_statement: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE •\l"]
  160 -> "160R23" [style=solid]
 "160R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
}
